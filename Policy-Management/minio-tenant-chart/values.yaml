# Default values for minio-tenant-chart.
tenant:
  additionalVolumeMounts: []
  additionalVolumes: []
  buckets: 
    - name: benchmark-bucket
      region: us-east-1
      objectLock: false
    - name: beta-bucket
      region: us-east-1
      objectLock: true      
  certificate:
    certConfig: {}
    externalCaCertSecret: []
    externalCertSecret: []
    requestAutoCert: true
  configSecret:
    name: tenant-beta-env-config
    accessKey: minio
    secretKey: minio123
  env: []
  exposeServices: {}
  features:
    bucketDNS: false
    domains: {}
    enableSFTP: false
  image:
    pullPolicy: IfNotPresent
    repository: quay.io/minio/minio
    tag: RELEASE.2025-04-08T15-41-24Z
  imagePullSecret: {}
  initContainers: []
  lifecycle: {}
  liveness: {}
  logging: {}
  metrics:
    enabled: false
    port: 9000
    protocol: http
  mountPath: /export
  metrics:
    enabled: true
    port: 9000
    protocol: http
  name: tenant-beta
  namespace: tenant-beta
  podManagementPolicy: Parallel
  pools:
  - affinity: {}
    annotations: {}
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      runAsGroup: 1000
      runAsNonRoot: true
      runAsUser: 1000
      seccompProfile:
        type: RuntimeDefault
    labels: {}
    name: pool-0
    nodeSelector: 
      directpv: "yes"
    resources:
      requests:
        cpu: 250m
        memory: 512Mi
    securityContext:
      fsGroup: 1000
      fsGroupChangePolicy: OnRootMismatch
      runAsGroup: 1000
      runAsNonRoot: true
      runAsUser: 1000
    servers: 4
    size: 2Gi
    storageAnnotations: {}
    storageLabels: {}
    tolerations: []
    topologySpreadConstraints: []
    volumesPerServer: 1
  poolsMetadata:
    annotations: {}
    labels: {}
  priorityClassName: ""
  prometheusOperator: false
  readiness: {}
  scheduler: {}
  serviceAccountName: ""
  serviceMetadata: {}
  startup: {}
  subPath: /data
  users: []

# Ingress configuration
ingress:
  api:
    enabled: true
    ingressClassName: "nginx"
    tls: [ ]
    host: api.tenant-beta.com
    path: /
    pathType: Prefix
  console:
    enabled: true
    ingressClassName: "nginx"
    labels: { }
    annotations: { }
    tls: [ ]
    host: console.tenant-beta.com
    path: /
    pathType: Prefix

# Enable PolicyBinding features
sts:
  enabled: true                    # Enable STS features
  policyBindingEnabled: true       # Create PolicyBinding resources
  policyManagement:
    enabled: true                  # Auto-create policies
    method: "job"                  # Use Kubernetes Job

    # Job configuration for policy creation
    job:
      # Enable policy setup job
      enabled: true
      # Job image
      image: minio/mc:latest
      # Restart policy
      restartPolicy: Never
      # Service account for job
      serviceAccount:
        name: minio-policy-admin
        create: true

# Define your 4 required roles + guest
policies:
  # Administrator role
  administrator:
    # Enable this policy
    enabled: true
    # Policy name in MinIO
    name: administrator-policy
    # Description
    description: "Full administrative access to all MinIO operations"
    # Policy definition
    policy:
      Version: "2012-10-17"
      Statement:
      - Effect: Allow
        Action: ["*"]
        Resource: ["*"]
    # Service account configuration
    serviceAccount:
      name: administrator-sa
      create: true
      # Additional annotations for service account
      annotations: {}
      # Additional labels
      labels:
        app.kubernetes.io/role: administrator
    # PolicyBinding configuration
    policyBinding:
      enabled: true
      name: administrator-binding
      # Additional metadata
      annotations: {}
      labels: {}

  # Auditor role  
  auditor:
    enabled: true
    name: auditor-policy
    description: "Read-only access to logs and system information"
    policy:
      Version: "2012-10-17"
      Statement:
      - Effect: Allow
        Action:
        - "admin:ServerInfo"
        - "admin:ListUsers"
        - "admin:ListGroups"
        - "admin:GetBucketQuota"
        - "admin:ConsoleLog"
        - "admin:Heal"
        Resource: ["*"]
      - Effect: Allow
        Action:
        - "s3:ListAllMyBuckets"
        - "s3:ListBucket"
        - "s3:GetBucketLocation"
        - "s3:GetBucketVersioning"
        - "s3:GetBucketNotification"
        Resource:
        - "arn:aws:s3:::*"
        - "arn:aws:s3:::*/*"
    serviceAccount:
      name: auditor-sa
      create: true
      annotations: {}
      labels:
        app.kubernetes.io/role: auditor
    policyBinding:
      enabled: true
      name: auditor-binding
      annotations: {}
      labels: {}

  # Datalake Admin role
  datalakeAdmin:
    enabled: true
    name: datalake-admin-policy
    description: "Full access to S3 operations and user management"
    policy:
      Version: "2012-10-17"
      Statement:
      - Effect: Allow
        Action: ["s3:*"]
        Resource:
        - "arn:aws:s3:::*"
        - "arn:aws:s3:::*/*"
      - Effect: Allow
        Action:
        - "admin:CreateUser"
        - "admin:DeleteUser"
        - "admin:ListUsers"
        - "admin:EnableUser"
        - "admin:DisableUser"
        - "admin:CreateServiceAccount"
        - "admin:UpdateServiceAccount"
        - "admin:RemoveServiceAccount"
        - "admin:ListServiceAccounts"
        - "admin:CreatePolicy"
        - "admin:DeletePolicy"
        - "admin:GetPolicy"
        - "admin:SetBucketQuota"
        - "admin:GetBucketQuota"
        Resource: ["*"]
    serviceAccount:
      name: datalake-admin-sa
      create: true
      annotations: {}
      labels:
        app.kubernetes.io/role: datalake-admin
    policyBinding:
      enabled: true
      name: datalake-admin-binding
      annotations: {}
      labels: {}

  # Datalake Viewer role
  datalakeViewer:
    enabled: true
    name: datalake-viewer-policy
    description: "Read-only access to all S3 buckets"
    policy:
      Version: "2012-10-17"
      Statement:
      - Effect: Allow
        Action:
        - "s3:GetBucketLocation"
        - "s3:GetObject"
        - "s3:ListBucket"
        - "s3:ListAllMyBuckets"
        - "s3:GetBucketVersioning"
        - "s3:GetBucketNotification"
        - "s3:ListBucketVersions"
        - "s3:GetObjectVersion"
        Resource:
        - "arn:aws:s3:::*"
        - "arn:aws:s3:::*/*"
    serviceAccount:
      name: datalake-viewer-sa
      create: true
      annotations: {}
      labels:
        app.kubernetes.io/role: datalake-viewer
    policyBinding:
      enabled: true
      name: datalake-viewer-binding
      annotations: {}
      labels: {}

  # Guest role
  guest:
    enabled: true
    name: guest-policy
    description: "Limited access to public buckets only"
    policy:
      Version: "2012-10-17"
      Statement:
      - Effect: Allow
        Action:
        - "s3:GetObject"
        - "s3:ListBucket"
        Resource:
        - "arn:aws:s3:::public"
        - "arn:aws:s3:::public/*"
        - "arn:aws:s3:::public-*"
        - "arn:aws:s3:::public-*/*"
    serviceAccount:
      name: guest-sa
      create: true
      annotations: {}
      labels:
        app.kubernetes.io/role: guest
    policyBinding:
      enabled: true
      name: guest-binding
      annotations: {}
      labels: {}

  # Custom policies support - Iride Production
  
  # custom policy: aif-dev-buckets
  aif-dev-buckets:
    enabled: true
    name: aif-dev-buckets
    description: "Custom policy aif-dev-buckets"
    policy:
      Version: "2012-10-17"
      Statement:
      - Effect: Allow
        Action:
        - "s3:GetBucketLocation"
        - "s3:ListBucket"
        Resource:
        - "arn:aws:s3:::aif-dev-cwl-test"
        - "arn:aws:s3:::aif-dev-forest-health-seasonal"
        - "arn:aws:s3:::aif-dev-forest-risk"
        - "arn:aws:s3:::aif-dev-s7-02-optical-substep02-flood-extent"
        - "arn:aws:s3:::aif-dev-forest-mapping"
        - "arn:aws:s3:::aif-dev-forest-vulnerability"
        - "arn:aws:s3:::aif-dev-ndvi1"
        - "arn:aws:s3:::aif-dev-s7-02-optical-substep01-pre-processing"
        - "arn:aws:s3:::aif-dev-test2"
        - "arn:aws:s3:::aif-dev-s7-02-optical-substep04-flood-depth"
        - "arn:aws:s3:::aif-dev-s7-02-optical-substep03-goflood"
        - "arn:aws:s3:::aif-dev-soil-loss"
        - "arn:aws:s3:::aif-dev-test1"
        - "arn:aws:s3:::aif-dev-forest-carbon-stock"
        - "arn:aws:s3:::aif-dev-forest-change"
        - "arn:aws:s3:::aif-dev-forest-health-nrt"
        - "arn:aws:s3:::aif-dev-process-name"
        - "arn:aws:s3:::aif-dev-s2cropper"
      - Effect: Allow
        Action:
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:DeleteObject"
        Resource:
        - "arn:aws:s3:::aif-dev-ndvi1/*"
        - "arn:aws:s3:::aif-dev-process-name/*"
        - "arn:aws:s3:::aif-dev-test1/*"
        - "arn:aws:s3:::aif-dev-forest-change/*"
        - "arn:aws:s3:::aif-dev-s7-02-optical-substep03-goflood/*"
        - "arn:aws:s3:::aif-dev-soil-loss/*"
        - "arn:aws:s3:::aif-dev-test2/*"
        - "arn:aws:s3:::aif-dev-forest-mapping/*"
        - "arn:aws:s3:::aif-dev-forest-vulnerability/*"
        - "arn:aws:s3:::aif-dev-s7-02-optical-substep01-pre-processing/*"
        - "arn:aws:s3:::aif-dev-s7-02-optical-substep04-flood-depth/*"
        - "arn:aws:s3:::aif-dev-s7-02-optical-substep02-flood-extent/*"
        - "arn:aws:s3:::aif-dev-cwl-test/*"
        - "arn:aws:s3:::aif-dev-forest-carbon-stock/*"
        - "arn:aws:s3:::aif-dev-forest-health-nrt/*"
        - "arn:aws:s3:::aif-dev-forest-risk/*"
        - "arn:aws:s3:::aif-dev-s2cropper/*"  
    serviceAccount:
      name: aif-dev-buckets-sa
      create: false
    policyBinding:
      enabled: false
      name: aif-dev-buckets-binding
      annotations: {}
      labels: {}
      
  custom: {}
    # Example custom policy:
    # customRole:
    #   enabled: true
    #   name: custom-policy
    #   description: "Custom policy description"
    #   policy:
    #     Version: "2012-10-17"
    #     Statement:
    #     - Effect: Allow
    #       Action: ["s3:GetObject"]
    #       Resource: ["arn:aws:s3:::custom-bucket/*"]
    #   serviceAccount:
    #     name: custom-sa
    #     create: true
    #   policyBinding:
    #     enabled: true
    #     name: custom-binding

# Additional configurations
rbac:
  # Create RBAC resources for policy management
  create: true

  # ClusterRole for policy management
  policyAdmin:
    name: minio-policy-admin
    rules:
    - apiGroups: [""]
      resources: ["secrets", "configmaps"]
      verbs: ["get", "list", "create", "update", "patch", "delete"]
    - apiGroups: ["batch"]
      resources: ["jobs"]
      verbs: ["get", "list", "create", "update", "patch", "delete"]
    - apiGroups: ["sts.min.io"]
      resources: ["policybindings"]
      verbs: ["get", "list", "create", "update", "patch", "delete"]

# Resource limits and requests
resources:
  policySetupJob:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Additional metadata
commonLabels:
  app.kubernetes.io/name: minio-tenant
  app.kubernetes.io/instance: minio-tenant
  app.kubernetes.io/version: "RELEASE.2024-10-02T17-50-41Z"
  app.kubernetes.io/component: object-storage
  app.kubernetes.io/part-of: minio-operator

commonAnnotations: {}
